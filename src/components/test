action.jsx

import {
    GET_PAPAR_TEMPLATE_LIST
} from './actionType'
import { createAsyncAction } from 'redux-action-tools'
import axios from 'axios'
import { paperTempaltes as paperTempaltesAPI } from '../../api/api'

export const getPaperTemplates = createAsyncAction(
    GET_PAPAR_TEMPLATE_LIST,
    () => {
        return axios.get(paperTempaltesAPI)
    }
)

actionType.jsx

export const GET_PAPAR_TEMPLATE_LIST = 'GET_PAPAR_TEMPLATE_LIST'

PaperTemplate.jsx

import React, {Component} from 'react';
import {withRouter} from "react-router-dom";
import { getPaperTemplates } from "./action";
import { connect } from 'react-redux'
import { TemplateCard } from './TemplateCard'
import LoadingArea from '../LoadingArea'

class PaperTemplate extends Component{
    componentDidMount() {
        this.props.getPaperTemplates()
    }
    render() {
        const { status, templates } = this.props

        console.log(templates);
        return (
            <LoadingArea status={status}>
                {
                    () => (
                        templates.map((template, key) => {
                            return (
                                <TemplateCard template={template} key={key} />
                            )
                        })
                    )
                }
            </LoadingArea>
        )
    }
}

const mapStateToProps = (state) => {
    return {
        status: state.paperTemplates.status,
        templates: state.paperTemplates.templates
    }
}

const mapDispatchToProps = (dispatch) => ({
    getPaperTemplates: () => dispatch(getPaperTemplates())
})

export default withRouter(connect(mapStateToProps, mapDispatchToProps)(PaperTemplate));

reducer.jsx

import { createReducer } from 'redux-action-tools'
import {
    GET_PAPAR_TEMPLATE_LIST
} from './actionType'

const defaultState = {
    tempaltes: [],
    status: 'initial'
}

const paperTemplateReducer = createReducer()
    .when(GET_PAPAR_TEMPLATE_LIST, (state, action) => {
        console.log('begin action')
        return {
            ...state,
            status: 'loading'
        }
    })
    .done((state= defaultState, action) => {
        const templates = action.payload.data
        return {
            ...state,
            templates,
            status: 'completed'
        }
    })
    .failed((state, action) => {
        return {
            ...state,
            status: 'failed'
        }
    })
    .build({
        status: 'initial'
    })

export { paperTemplateReducer as reducer }

TemplateCard.jsx

import React, {Component} from 'react';
import { Card, Icon, Slider, InputNumber, Row, Col } from 'antd';

class TemplateCard extends Component{

    state = {
        isEdit: false,
        difficulty: 0
    }

    onDifficultyChange = (value) => {
        this.setState({
            difficulty: value
        })
    }

    editClick = () => {
        this.setState({
            isEdit: true
        })
    }

    render() {
        const { template } = this.props;
        return (
            <Card
                title={template.name}
                actions={[<Icon type="edit" onClick={this.editClick} />,<Icon type="copy" />,<Icon type="delete" />, <Icon type="profile" />]}
                style={{ width: 400 }} >
                <Row>
                    <Col span={4}>
                        总分:
                    </Col>
                    <Col>
                        30
                    </Col>
                </Row>

                <Row>
                    <Col span={4}>
                        难度:
                    </Col>
                    <Col span={16}>
                        <Slider
                            disabled={this.state.isEdit ? false : true}
                            min={1}
                            max={10}
                            onChange={this.onDifficultyChange}
                            value={typeof template.difficulty === 'number' ? template.difficulty : 0} />
                    </Col>
                    <Col span={4}>
                        <InputNumber
                            min={1}
                            max={10}
                            value={template.difficulty}
                            onChange={this.onDifficultyChange}
                            style={{ width: 30 }}
                        />
                    </Col>
                </Row>

                {
                    template.paperStructs.map((questType, key) => {
                    return (
                        <Row key={key}>
                            <Col span={8}>
                                {questType.name}
                            </Col>
                            <Col span={8}>
                                {questType.number}
                            </Col>
                            <Col span={8}>
                                {questType.difficult}
                            </Col>
                        </Row>
                    )
                })}

            </Card>
        )
    }
}

export { TemplateCard }
